{"id": "b8md5b", "title": "I wrote a Python script for Portfolio Optimization", "selftext": "Augment your autistic stock picking with computational brute force! This module creates a correlation matrix and exports it to an Excel Spreadsheet so you can optimize your poorly chosen portfolio with the Excel Data Solver add-in. All you have to do is enter the tickers you're interested in as the stocksymbols list at the very beginning of the script. The script uses the IEX 5-year daily price history json for all the tickers but, you can play around with the url and say, change it to 1 year or shorter because you would obviously never be interested in long-term investing. \n\nOnce the module creates and opens the Excel sheet for you, make a table of the tickers and empty weights and a cell with the sum of the tickers weights. Create a cell for portfolio return and one for portfolio variance. Portfolio variance = MMULT(TRANSPOSE(Ticker weights),MMULT(Correlation Matrix,Ticker weights) ctrl, shift, enter. Portfolio Return just equals the sum of the weighted returns. Data solver parameters: minimize portfolio variance cell by changing the ticker weights, subject to the constraint that the sum of them is equal to one. Then, you'll have your empirically optimized portfolio of which, assuming history is indicative of the future, you should receive the greatest amount of return relative to your risk. \n\n    import numpy as np\n    import pandas as pd\n    import os\n    import openpyxl\n\n    stocksymbols = ['UNH', 'MMM', 'BRK.B', 'IBM', 'AAL', 'AXP', 'JPM', 'IBM', 'JNJ', 'BF.B', 'PM', 'AAPL', 'DIS', 'FB', 'UAA', 'ULTA', 'NFLX', 'SNAP', 'TGT', 'DEO', 'CROX', 'RL', 'TLRY', 'CAT'] \n\n    thebigdict = {'Ticker': stocksymbols}\n    dfbig = pd.DataFrame(thebigdict)\n    dfbig.rename(index=str)\n    print(dfbig)\n\n    #create list of returns and list of standard deviations\n\n    returnslist=[]\n    standdevlist=[]\n    for symbolmain in stocksymbols:\n        dfmain = pd.DataFrame()\n        try:\n            dfmain = pd.read_json('https://api.iextrading.com/1.0/stock/'+symbolmain+'/chart/5y')\n        except Exception: pass #some symbols don't have json \n    urls\n        try:\n            dailyreturnavgmain = '{:f}'.format((dfmain.changePercent-(1.76/365)).mean())\n            standdevmain = '{:f}'.format((dfmain.changePercent-(1.76/365)).std())\n        except AttributeError: pass #some symbol jsons don't have changePercent attributes\n        returnslist.append(dailyreturnavgmain)\n        standdevlist.append(standdevmain)\n\n        correlationlist=[]#for the correlations of the symbol in \nstocksymbols with all other symbols\n        for symbolsecond in stocksymbols:\n            dfsecond = pd.DataFrame()\n            try:\n                dfsecond = pd.read_json('https://api.iextrading.com/1.0/stock/'+symbolsecond+'/chart/5y')\n            except Exception: pass #some symbols don't have json urls\n            try:\n                dailyreturnavgsecond = '{:f}'.format((dfsecond.changePercent-(1.76/365)).mean())\n                standdevsecond = '{:f}'.format((dfsecond.changePercent-(1.76/365)).std())\n            except AttributeError: pass #some symbol jsons don't have changePercent attributes\n            try:\n                covariance = ((((dfmain.changePercent)-((dfmain.changePercent-(1.76/365)).mean()))*((dfsecond.changePercent)-((dfsecond.changePercent-(1.76/365)).mean()))).mean())\n                correlation = (((((dfmain.changePercent)-((dfmain.changePercent-(1.76/365)).mean()))*((dfsecond.changePercent)-((dfsecond.changePercent-(1.76/365)).mean()))).mean())/(((dfmain.changePercent-(1.76/365)).std())*((dfsecond.changePercent-(1.76/365)).std())))\n                correlationlist.append(correlation)\n            except AttributeError: pass #missing attribute\n            print(\"subordinate symbols remaining this loop:\")\n            print(len(stocksymbols)-len(correlationlist))\n        print(\"exterior symbols remaining:\")\n        print(\"vvv\")\n        print(len(stocksymbols)-len(returnslist))\n        print(\"vvv\")\n        dfcorrelation = pd.DataFrame(correlationlist)\n        dfcorrelation.rename(index=str)\n        dfbig = pd.concat([dfbig, dfcorrelation], axis=1, join='inner')\n    \n\n    #create dfreturns and dfstanddev, concatenate them on \n    dfbig\n    dfreturns = pd.DataFrame(returnslist)\n    print(dfreturns)\n    dfstanddev = pd.DataFrame(standdevlist)\n    print(dfstanddev)\n    dfbig = pd.concat([dfbig, dfreturns], axis=1, join='inner')\n    dfbig = pd.concat([dfbig, dfstanddev], axis=1, join='inner')\n\n    #rename the correlation matrix columns so they line up\n    spacelist=[\"\"]\n    stocksymbols = spacelist + stocksymbols\n    morenameslist=[\"Returns\", \"Standard Deviation\"]\n    stocksymbols = stocksymbols + morenameslist\n    dfbig.columns = stocksymbols\n    print(dfbig)\n\n    dfbig.to_excel('CorrelationMatrix2.xlsx')\n    os.startfile('CorrelationMatrix2.xlsx')", "created_utc": 1554226800, "permalink": "/r/wallstreetbets/comments/b8md5b/i_wrote_a_python_script_for_portfolio_optimization/", "is_self": true}