{"id": "chvgtw", "title": "Create Your Own Option Database", "selftext": "Disclaimer: Lot of fucking words\n\nI have been working on creating a python app to store Options Data for my own use over the past couple of weeks and figured that I would share it to this sub. I will say I am nowhere near finished, but the basics of the app are up and running. That being said, **there is zero error handling**, if you fuck up and put something like 200 in for the ticker the app will crash.\n\nThe app is called OptionDB and the idea is that with it you can create and maintain your own options database filled with historical data to back test strategies or create 3D surface plots like this: [https://imgur.com/a/NXqi2NM](https://imgur.com/a/NXqi2NM). This is the 3D volatility surface for MSFT calls yesterday. I should say upfront that besides the 3D plotting, the app only works to store and maintain the data, **it is pretty much up to the user as to how they want to use it**. I have my own custom scripts for my own analysis, say tracking the net delta exposure on all QQQ calls/puts, may add this in latter.\n\nI bundled the app along with all the packages into a .exe file but I recognize the downloading a exe from a unverified publisher is sketchy so I will detail two different ways you can set it up.\n\n1. If you want to use the executable it is fairly simple, but you **must have a Windows system**. Download the executable from this dropbox link: [https://www.dropbox.com/s/bh6hqq4p6ttnr91/MainWindow.exe?dl=0](https://www.dropbox.com/s/bh6hqq4p6ttnr91/MainWindow.exe?dl=0).  After that, move the executable to to the folder of your choice. Then in your C drive create a folder named OptionDB. This will be the directory for the database files so the path must be **C:/OptionDB**. \n\n2. If you want to build it from the source or just view the code, the GitHub is: [https://github.com/Nathan-T1/OptionDB](https://github.com/Nathan-T1/OptionDB). I will not go into detail as to how to set it up python as I assume if you go this route you have some level of python knowledge. Just make sure to build the directory exactly as seen in the repository, add paths to the Data and UI folder, and create the folder for the database as mentioned above.\n\nNow all you need is a Tradier API key, which can be obtained by signing up here: [https://developer.tradier.com/user/sign\\_up](https://developer.tradier.com/user/sign_up). I am not affiliated with them in any way, just a good free options API that I like. After making an account request your free API Key.\n\nNow you can open the executable or run the app you built from my source. When your open the app for the first time you will need to do complete 3 things. One, press the Generate DB button on the left side. Next press the Generate Archive. Finally press the API key button and enter your key in.\n\nNow you are ready to use it. The rest of this post will be detailing how to use it and what all the buttons do.\n\nTo start off, press Update DB. This is the main functionality of the app and will be run frequently. Your first time opening it, you will need to add the tickers you wish to store data on then press add after each one. The more you do, the longer it will take to pull and more storage it will take. \n\nAfter you have your list, you can press the Update Database button. Only press this button once per day after 5 pm eastern or you will create duplicates in your database. Depending on how many tickers you store, this can take around 5 minutes. Now you can export your data into a csv by pressing the Export Day button or Export Custom. These functions will export a csv to wherever the exe is located based on what you fill in. \n\nIf you just want a quick one day pull you can press the Single pull button. Enter the ticker and destination, **do not press SQL** if you have already updated your database for the day. Custom pull is self-explanatory, don\u2019t list strikes if you have more than one ticker.\n\nFor Export Custom, **always put 0 in for days**, haven\u2019t added the custom functionality for this yet. Otherwise Self-explanatory.\n\nTo create a 3D mesh, press Create Mesh. You can only create mesh if you have the data in your database. The possible targets you can use are **last, ask, bid, volume, weighted\\_volume, IV**. Will add more latter. Check Export mesh if you want it to export the grid as a csv. Note the IV solver is not perfect, but you can export it as a mesh and work with it your self if you get a weird surface.\n\nThat is pretty much it. The rest is up to you. If you want **my historical data the dropbox is**: [https://www.dropbox.com/s/ma4369ld27wwew6/MAIN.db?dl=0](https://www.dropbox.com/s/ma4369ld27wwew6/MAIN.db?dl=0). I accidentally overwrote most of my data two weeks ago, so most if it got deleted. Also, the dates for the SPY table are fucked up, haven\u2019t had time to change it so only query from the last two days for SPY. \n\nIf you use my data base, place it in the folder I mentioned above, but **do not press the Generate DB button** inside the app when you first start the app, but you will need to press the API key.  \n\nI have gotten the executable to work on two different systems, but I am guessing there will be problems. Let me know if there are any questions. If you plan on using this a lot or want to see the data, I highly recommend downloading DB Browser from [https://sqlitebrowser.org/](https://sqlitebrowser.org/).  You can edit and update data and execute SQL queries if you know that shit. \n\nIf your app keeps crashing, run it from the command line and it will display some form of error, maybe I can help fix it.", "created_utc": 1564098752, "permalink": "/r/wallstreetbets/comments/chvgtw/create_your_own_option_database/", "is_self": true}