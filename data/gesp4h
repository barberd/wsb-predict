{"id": "gesp4h", "title": "Python Options Analyzer", "selftext": "TLDR: I made a program that takes data from SPY to figure out weekly options that you can buy. **Use at your own risk, program has not been tested on how well it works.** Read the rest for a detail explanation. Let me know if I put the right flair on this post.\n\nYou're welcome, this is probably more analysis that most of ya'll do.\n\nAlright I made you guys a program that will help you figure out if you should buy calls or puts on SPY. Let me explain how it works and assumptions, and I will post the code at the end of the post. I will write a TLDR, so you can go straight into it. As a **reminder** use this at your own damn risk, do your research, and do not I repeat do NOT use this as your only resource. Or YOLO? Alright, so the financial assumptions of my model are the following. SPY can go to $0 and SPY can go up to $400 in the next 2 years. Why $400? Because 400/2 = 200 and whats 200/100 = 2. The name of the subreddit is Wall St **B**ets. B is the second letter of the English Alphabet. We got the financials down. Now let's look at the data it needs. It only needs the previous closing price of SPY. Input that data, run the program, It will tell you what strike price option to buy. Keep in mind it is assuming that you are buying **WEEKLY** options. It will not work on anything longer than 5 days. This uses the assumption of the **Efficient Market Hypothesis** repeat it over and over again until thats the only thing you can think of. Specifically, it tries to exploit that **EMH** *cannot* explain certain anomalies in the market.\n\n# READ FROM HERE*\n\nNow on to the tech side. If you are not running Jupyter notebook or VScode, you can use the following website to paste the code in  [Python online IDE](https://repl.it/languages/python3). **DO NOT FORGET TO CHANGE WHAT SPY EQUALS.** Now on to the code:\n\n    import random\n    #Previous Close. CHANGE THIS WHEN RUNNING THE PROGRAM  TO THE PREVIOUS CLOSE!\n    SPY = 286.19\n    \n    #Algorithm that predicts future price\n    def CallStrike():\n        return random.randint(0,400)\n    \n    #Algorithm that decides to buy puts or calls\n    def PutOrCall(prediction):\n        if prediction > SPY:\n            return \"Call\"\n        else:\n            return \"Put\"\n    \n    #Combines everything\n    if __name__ == \"__main__\":\n        strike = CallStrike()\n        OptionType = PutOrCall(strike)\n        print(\"{} {}\".format(strike,OptionType))", "created_utc": 1588799490.0, "permalink": "/r/wallstreetbets/comments/gesp4h/python_options_analyzer/", "is_self": true}